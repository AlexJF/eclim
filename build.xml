<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (C) 2005 - 2008  Eric Van Dewoestine

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
<project name="build" default="deploy" basedir=".">

  <property environment="env"/>
  <property file="src/ant/build.properties"/>

  <path id="ant-contrib-classpath">
    <pathelement location="src/ant/lib/ant-contrib-1.0b1.jar"/>
  </path>
  <taskdef resource="net/sf/antcontrib/antcontrib.properties"
      classpathref="ant-contrib-classpath"/>
  <taskdef classname="net.sf.antcontrib.logic.For" name="for"
      classpathref="ant-contrib-classpath"/>

  <import file="src/ant/dist.xml"/>
  <import file="src/ant/docs.xml"/>
  <import file="src/ant/logger.xml"/>
  <import file="src/ant/patch.xml"/>
  <import file="src/ant/test.xml"/>

  <!-- exclude vim swap files -->
  <defaultexcludes add="**/*.swp"/>

  <!-- classpath -->
  <path id="classpath">
    <fileset dir="lib" includes="**/*.jar"/>
    <fileset dir="src/eclipse/plugins/" includes="*/lib/*.jar"/>
    <fileset dir="${eclipse.home}" includes="startup.jar"/>
    <fileset dir="${eclipse.home}/plugins"
        includes="**/*.jar" excludes="org.eclim*/**/*.jar"/>
  </path>

  <!--
    - Initialize the build.
    -->
  <target name="init">
    <mkdir dir="${build.classes}"/>
    <mkdir dir="${build.features}"/>
    <mkdir dir="${build.plugins}"/>
  </target>

  <!--
    - Main target for building the eclipse plugins.
    -->
  <target name="build" depends="init" description="Builds the eclipse plugins.">
    <property name="deprecation" value="false"/>
    <property name="compilerargs" value=""/>

    <!-- build shared source -->
    <javac destdir="${build.classes}" debug="on" optimize="false"
        target="${javac.target}" source="${javac.target}"
        deprecation="${deprecation}">
      <compilerarg line="${compilerargs}"/>
      <src path="src/java"/>
      <include name="**/*.java"/>
      <exclude name="**/plugin/**/*.java"/>
      <classpath refid="classpath"/>
    </javac>

    <mkdir dir="${build.plugins}/org.eclim_${eclim.version}/lib"/>

    <!-- eclim jar file -->
    <jar jarfile="${build.plugins}/org.eclim_${eclim.version}/eclim.jar">
      <fileset dir="${build.classes}">
        <include name="org/eclim/**/*.class"/>
        <include name="org/eclipse/**/*.class"/>
        <exclude name="org/eclim/misc/**/*.class"/>
        <exclude name="org/eclim/plugin/*/**/*.class"/>
      </fileset>
      <fileset dir="src/java">
        <include name="org/eclim/**/*"/>
        <include name="org/eclipse/**/*"/>
        <exclude name="org/eclim/misc/"/>
        <exclude name="org/eclim/misc/*/"/>
        <exclude name="org/eclim/misc/**/*.class"/>
        <exclude name="org/eclim/plugin/*/"/>
        <exclude name="org/eclim/plugin/*/**/*"/>
        <exclude name="**/package.html"/>
        <exclude name="**/*.java"/>
      </fileset>
    </jar>

    <!-- eclim misc jar file -->
    <jar jarfile="${build.plugins}/org.eclim_${eclim.version}/eclim-misc.jar">
      <fileset dir="${build.classes}">
        <include name="org/eclim/misc/**/*.class"/>
      </fileset>
      <fileset dir="src/java">
        <include name="org/eclim/misc/*/**/*"/>
        <exclude name="**/package.html"/>
        <exclude name="**/*.java"/>
      </fileset>
    </jar>

    <copy todir="${build.plugins}/org.eclim_${eclim.version}">
      <fileset dir="." includes="src/nailgun/**/*"/>
    </copy>

    <touch mkdirs="true"
        file="${build.plugins}/org.eclim_${eclim.version}/log/.keep"/>
    <copy todir="${build.plugins}/org.eclim_${eclim.version}/bin">
      <fileset dir="src/shell" includes="**/*"/>
    </copy>

    <antcall target="plugin">
      <param name="plugin.name" value=""/>
    </antcall>

    <!-- build non-core plugins -->
    <foreach list="${plugins}" target="plugin" delimiter=","
        inheritAll="true" param="plugin.name" trim="true"/>

    <!-- patch nailgun jar file -->
    <jar jarfile="${build.plugins}/org.eclim_${eclim.version}/lib/nailgun-0.7.1.jar"
        update="true">
      <fileset dir="${build.classes}">
        <include name="com/martiansoftware/nailgun/**/*.class"/>
      </fileset>
    </jar>

    <!-- patch tagsoup jar file -->
    <jar jarfile="${build.plugins}/org.eclim.wst_${eclim.version}/lib/tagsoup-1.2.jar"
        update="true">
      <fileset dir="${build.classes}">
        <include name="org/ccil/cowan/tagsoup/**/*.class"/>
      </fileset>
    </jar>
  </target>

  <!--
    - Target to deploy eclipse and vim plugins.
    -->
  <target name="deploy" depends="build"
      description="Deploy the eclipse and vim plugins.">
    <!-- deploy eclipse files -->
    <copy todir="${eclipse.home}/plugins">
      <fileset dir="${build.plugins}" includes="**/*"/>
    </copy>
    <chmod dir="${eclipse.home}/plugins/org.eclim_${eclim.version}/bin"
        includes="**/*" excludes="*.sed" perm="ugo+x"/>

    <!-- deploy vim files -->
    <mkdir dir="${vim.files}/eclim"/>
    <copy todir="${vim.files}/eclim/autoload"
        file="src/vim/eclim/autoload/eclim.vim" overwrite="true"/>
    <sync todir="${vim.files}/eclim">
      <fileset dir="src/vim/eclim" includes="**/*"/>
      <preserveintarget>
        <include name="after/**/*.vim"/>
        <include name="resources/**/*"/>
      </preserveintarget>
    </sync>
  </target>

  <!--
    - Create the jar file for a plugin
    -->
  <target name="plugin">
    <echo> building plugin: ${plugin.name} </echo>
    <if>
      <not><equals arg1="${plugin.name}" arg2=""/></not>
      <then>
        <property name="plugin.path"
            value="${build.plugins}/org.eclim.${plugin.name}_${eclim.version}"/>
        <mkdir dir="${plugin.path}"/>

        <javac destdir="${build.classes}" debug="on" optimize="false"
            target="${javac.target}" source="${javac.target}"
            deprecation="${deprecation}">
          <compilerarg line="${compilerargs}"/>
          <src path="src/java"/>
          <include name="**/plugin/${plugin.name}/**/*.java"/>
          <classpath refid="classpath"/>
        </javac>

        <jar jarfile="${plugin.path}/eclim.${plugin.name}.jar">
          <fileset dir="${build.classes}">
            <include name="**/plugin/${plugin.name}/**/*.class"/>
          </fileset>
          <fileset dir="src/java">
            <include name="**/plugin/${plugin.name}/**/*"/>
            <exclude name="**/package.html"/>
            <exclude name="**/*.java"/>
          </fileset>
        </jar>
        <var name="plugin.name" value=".${plugin.name}"/>
      </then>
    </if>
    <copy todir="${build.plugins}/org.eclim${plugin.name}_${eclim.version}">
      <fileset dir="src/eclipse/plugins/org.eclim${plugin.name}" includes="**/*"/>
    </copy>

    <replace dir="${build.plugins}/org.eclim${plugin.name}_${eclim.version}"
        includes="bin/**/*, about.html, plugin.properties, META-INF/MANIFEST.MF">
      <replacefilter token="$${eclim.version}" value="${eclim.version}"/>
      <replacefilter token="$${vim.files}" value="${vim.files}"/>
    </replace>

    <antcall target="plugin.lib.jars">
      <param name="plugin.name" value="${plugin.name}"/>
    </antcall>
  </target>

  <!--
    - Target responsible for building a list of jar files for the specified
    - plugin and updating its manifest accordingly.
    -->
  <target name="plugin.lib.jars">
    <!-- build list of jar files for main plugin's manifest. -->
    <if>
      <available file="${build.plugins}/org.eclim${plugin.name}_${eclim.version}/lib"/>
      <then>
        <path id="lib.jars">
          <fileset dir="${build.plugins}/org.eclim${plugin.name}_${eclim.version}/lib"
              includes="*"/>
        </path>
        <property name="lib.jars" refid="lib.jars"/>
        <propertyregex property="lib.jars" override="true"
            input="${lib.jars}" regexp="\\" replace="/"/>
        <propertyregex property="lib.jars" override="true"
            input="${lib.jars}" regexp="([A-Z]:)?/.*?/lib/" replace="lib/"/>
        <propertyregex property="lib.jars" override="true"
            input="${lib.jars}" regexp="(:|;)" replace=","/>

        <replace dir="${build.plugins}/org.eclim${plugin.name}_${eclim.version}"
            includes="META-INF/MANIFEST.MF">
          <replacefilter token="$${eclim.lib.jars}" value="${lib.jars}"/>
        </replace>

        <!--
          - separates lib entries onto new lines since the single line length of
          - the classpath entry seems to be limited.
          -->
        <replace dir="${build.plugins}/org.eclim${plugin.name}_${eclim.version}"
            includes="META-INF/MANIFEST.MF">
          <replacetoken>,lib</replacetoken>
          <replacevalue>,
  lib</replacevalue>
        </replace>

        <fixcrlf srcdir="${build.plugins}/org.eclim${plugin.name}_${eclim.version}"
            includes="META-INF/MANIFEST.MF" eol="unix"/>
      </then>
    </if>
  </target>

  <!--
    - Delete any generated artifacts of the build.
    -->
  <target name="clean" description="Deletes the build directory.">
    <delete dir="build"/>
  </target>

</project>
