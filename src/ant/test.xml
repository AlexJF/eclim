<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (C) 2005 - 2008  Eric Van Dewoestine

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
<project name="test" default="test" basedir="../..">

  <property name="eclim.home"
      value="${eclipse.home}/plugins/org.eclim_${eclim.version}"/>
  <property name="test.include" value="**/*Test"/>
  <if>
    <os family="windows"/>
    <then>
      <property name="script.ext" value=".bat"/>
      <propertyregex property="eclipse.workspace" override="true"
          input="${eclipse.workspace}" regexp="\\" replace="/"/>
    </then>
    <else>
      <property name="script.ext" value=""/>
    </else>
  </if>

  <!--
    - Task for starting eclimd and running unit tests.
    -->
  <target name="test" depends="deploy"
      description="Starts the eclim server and runs the junit tests">
    <path id="junit">
      <pathelement location="lib/junit-4.1.jar"/>
    </path>

    <taskdef name="junit" classpathref="junit"
        classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>
    <taskdef name="junitreport" classpathref="junit"
        classname="org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator"/>

    <if>
      <socket server="localhost" port="9091"/>
      <then>
        <runtarget target="tests.run"/>
      </then>
      <else>
        <echo>Starting eclimd...</echo>
        <parallel>
          <exec executable="${eclim.home}/bin/eclimd${script.ext}"
              output="build/test/junit/eclimd.log"/>
          <sequential>
            <waitfor maxwait="20" maxwaitunit="second">
              <socket server="localhost" port="9091"/>
            </waitfor>
            <runtarget target="tests.run"/>
            <exec executable="${eclim.home}/bin/eclim${script.ext}">
              <arg line="-command shutdown"/>
            </exec>
          </sequential>
        </parallel>
      </else>
    </if>

    <!-- generate html results -->
    <!--junitreport todir="build/test/junit/results">
      <fileset dir="build/test/junit/results" includes="*.xml"/>
      <report format="noframes" todir="build/junit/test/results/html"/>
    </junitreport-->
  </target>

  <!--
    - Runs the junit tests after eclimd has been started.
    -->
  <target name="tests.run">
    <mkdir dir="build/test/junit/results"/>
    <mkdir dir="build/test/vunit/results"/>

    <antcall target="test.setup_projects"/>
    <antcall target="tests.run.junit"/>
    <antcall target="tests.run.vunit"/>
    <antcall target="test.teardown_projects"/>
  </target>

  <!--
    - Runs the junit tests after eclimd has been started.
    -->
  <target name="tests.run.junit" unless="junit.skip">
    <mkdir dir="build/test/junit/classes"/>

    <javac destdir="build/test/junit/classes" debug="on" optimize="false"
        target="${test.javac.target}" source="${test.javac.target}"
        deprecation="${deprecation}">
      <src path="src/test/junit"/>
      <include name="**/*.java"/>
      <exclude name="org/eclim/plugin/**/*.java"/>
      <classpath>
        <path refid="classpath"/>
        <pathelement path="${build.classes}"/>
      </classpath>
    </javac>

    <for list="${plugins}" param="plugin">
      <sequential>
        <echo>Compile tests for @{plugin}...</echo>
        <javac destdir="build/test/junit/classes" debug="on" optimize="false"
            target="${test.javac.target}" source="${test.javac.target}"
            deprecation="${deprecation}">
          <src path="src/test/junit"/>
          <include name="org/eclim/plugin/@{plugin}/**/*.java"/>
          <classpath>
            <path refid="classpath"/>
            <pathelement path="${build.classes}"/>
          </classpath>
        </javac>
      </sequential>
    </for>

    <copy todir="build/test/junit/classes" includeEmptyDirs="false">
      <fileset dir="src/test/junit">
        <include name="**/*"/>
        <exclude name="**/*.java"/>
      </fileset>
    </copy>

    <junit printsummary="yes">
      <classpath>
        <path refid="classpath"/>
        <pathelement path="${build.classes}"/>
        <pathelement path="build/test/junit/classes"/>
      </classpath>
      <formatter type="xml"/>
      <batchtest fork="yes" todir="build/test/junit/results">
        <fileset dir="build/test/junit/classes" includes="${test.include}.class"/>
      </batchtest>
      <sysproperty key="eclim.home" value="${eclim.home}"/>
      <sysproperty key="eclim.version" value="${eclim.version}"/>
    </junit>
  </target>

  <!--
    - Runs vim script unit tests.
    -->
  <target name="tests.run.vunit" unless="vunit.skip">
    <taskdef name="vunit" classname="org.eclim.misc.ant.VUnitTask">
      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="build/dist/eclim-misc.jar"/>
        <path refid="classpath"/>
      </classpath>
    </taskdef>

    <delete>
      <fileset defaultexcludes="no"
          dir="build/test/vunit/results/" includes=".*.xml.swp"/>
    </delete>
    <vunit plugin="src/ant/lib/vunit.vim" todir="build/test/vunit/results"
        haltonfailure="true" failureproperty="vunit.failed">
      <fileset dir="src/test/vunit"
          includes="${test.include}.vim"
          excludes="${test.exclude}.vim"/>
      <sysproperty key="g:TestEclimWorkspace" value="${eclipse.workspace}"/>
    </vunit>

    <!--fail message="VUnit tests failed." if="vunit.failed"/-->
  </target>

  <!--
    - Sets up the test projects.
    -->
  <target name="test.setup_projects">
    <delete includeEmptyDirs="true">
      <fileset dir="${eclipse.workspace}" includes="eclim_unit_test*/**/*"/>
      <fileset dir="${eclipse.workspace}" includes="eclim_unit_test*"/>
    </delete>
    <copy todir="${eclipse.workspace}">
      <fileset dir="src/test/resources" includes="eclim_unit_test*/**/*"/>
    </copy>

    <antcall target="test.create_project">
      <param name="project" value="eclim_unit_test"/>
      <param name="nature" value="none"/>
    </antcall>

    <antcall target="test.create_project">
      <param name="project" value="eclim_unit_test_java"/>
      <param name="nature" value="java"/>
    </antcall>

    <antcall target="test.create_project">
      <param name="project" value="eclim_unit_test_web"/>
      <param name="nature" value="none"/>
    </antcall>

    <antcall target="test.create_project">
      <param name="project" value="eclim_unit_test_php"/>
      <param name="nature" value="php"/>
    </antcall>
  </target>

  <!--
    - Creates a unit test project.
    -->
  <target name="test.create_project">
    <echo>Creating test project: ${project}...</echo>
    <exec executable="${eclim.home}/bin/eclim${script.ext}" failonerror="true"
        output="build/test/junit/eclim.log" append="false">
      <arg line='
          -command project_create -f
          "${eclipse.workspace}/${project}" -n ${nature}
          '/>
    </exec>
    <move overwrite="true"
        file="${eclipse.workspace}/${project}/project"
        tofile="${eclipse.workspace}/${project}/.project"/>
  </target>

  <!--
    - Tears down the test projects.
    -->
  <target name="test.teardown_projects">
    <!--exec executable="${eclim.home}/bin/eclim${script.ext}" failonerror="true"
        output="build/test/junit/eclim.log" append="true">
      <arg line="-command project_delete -n eclim_unit_test_java"/>
    </exec-->

    <!--delete includeEmptyDirs="true">
      <fileset dir="${eclipse.workspace}" includes="eclim_unit_test*/**/*"/>
      <fileset dir="${eclipse.workspace}" includes="eclim_unit_test*"/>
    </delete-->
  </target>

</project>
