<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 2005 - 2006

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  -->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN"
  "http://forrest.apache.org/dtd/document-v20.dtd">
<!--
  Author: Eric Van Dewoestine
  -->

<document>
  <header>
    <title>Creating your first java project.</title>
    <authors>
      <person name="Eric Van Dewoestine" email="ervandew@yahoo.com"/>
    </authors>
  </header>
  <body>
    <p>
      The goal of this guide is to walk you through creating your first java
      project via eclim.
    </p>
    <section id="project_create">
      <title>Creating a project</title>
      <p>
        The first step is to open a vim window and create the project by
        executing:
      </p>
      <source>
        :ProjectCreate /path/to/my_project
      </source>
      <p>
        The path supplied will be the path to the root of your project.  This
        path may or may not exist.  If it does not exist it will be created for
        you.  If the path does exist, it will be examined for any source
        directories or libraries (jar files) that should be included in the
        project's classpath.  In either case the end result will be the creation
        of a <code>.project</code> and <code>.classpath</code> file in the
        supplied directory.  At this time, the <code>.project</code> file is
        nothing that you need to worry about maintaining as it is purely for
        eclipse.  The <code>.classpath</code> file on the other hand, is used
        to manage your project's dependencies, including dependencies on other
        projects, other libraries, and the location of your source directories.
        For more on maintaining this file see the
        <a href="../../vim/java/classpath.html">classpath docs</a>.
      </p>
      <p>
        Once you've created your project you can now use the
        <strong>:ProjectList</strong> to list the available projects and you
        should see your newly created one in the list.
      </p>
      <source>
        my_project - open   - /path/to/my_project
      </source>
      <p>
        The <strong>:ProjectList</strong> result is in the form of
        <code>projectName - (open|closed) - /project/root/path</code>.  When you
        create projects, the last path element will be used for the project
        name.  If that element contains any spaces, they will be converted to
        underscores.
      </p>
    </section>
    <section id="project_settings">
      <title>Editing project settings.</title>
      <p>
        After creating a project, the next thing you'll probably want to do is
        edit your project's settings.  To do this you can use the
        <a href="../../vim/common/project.html#ProjectSettings">
          <strong>:ProjectSettings</strong>
        </a>
        command.  If your current vim window's
        working directory is at or under the project's root directory then you
        can execute the <strong>:ProjectSettings</strong> with no arguments,
        otherwise you will need to supply the project name.
      </p>
      <source>
        :ProjectSettings projectName
      </source>
      <p>
        After your first time editing your project's settings, a .settings
        directory will be created in the project's root directory.  In there are
        the project's preferences files.  You should avoid editing these files
        directly and stick to using <strong>:ProjectSettings</strong> to update
        them.
      </p>
      <note>
        If you have only one project or many projects that share the same
        settings you can use the
        <a href="../../vim/index.html#Settings">
          <strong>:Settings</strong>
        </a>
        command instead to edit the
        global settings.  These global settings will apply to any project that
        has not overridden them with values via
        <strong>:ProjectSettings</strong>.
      </note>
    </section>
    <section id="classpath">
      <title>Your project's classpath.</title>
      <p>
        In the first section, we mentioned that when a project is created a
        .classpath file is also created at the root directory of the project.
        If you did not create a project from an existing project directory (one
        containing source files, etc.), then your next step will be to tell
        eclipse where you plan to store you source files.
      </p>
      <p>
        For the purpose of this example we will assume that you will store your
        source files at:
      </p>
      <source>
        /path/to/my_project/src/java
      </source>
      <p>
        So, given that location, you will need to open the file
        /path/to/my_project/.classpath in vim.
      </p>
      <source>
        vim /path/to/my_project/src/java/.classpath
      </source>
      <p>
        To add the source directory simply execute the following
      </p>
      <source>
        :NewSrcEntry src/java
      </source>
      <p>
        This will add the necessary entry to the end of your .classpath file.
        The contents of this file should now look something like this:
      </p>
      <source>
        <![CDATA[
          <?xml version="1.0" encoding="UTF-8"?>
          <classpath>
            <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
            <classpathentry kind="output" path="bin"/>
            <classpathentry kind="src" path="src/java"/>
          </classpath>
        ]]>
      </source>
      <p>
        Now that your source directory is setup, you can proceed to edit java
        files in that directory and make use of the java functionality provided
        by eclim.
      </p>
    </section>
  </body>
</document>
