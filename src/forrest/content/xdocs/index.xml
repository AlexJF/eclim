<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2002-2004 The Apache Software Foundation or its licensors,
  as applicable.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN"
  "http://forrest.apache.org/dtd/document-v20.dtd">
<!--
 Author: Eric Van Dewoestine
-->

<document>
  <header>
    <title>Welcome to Eclim</title>
    <authors>
      <person name="Eric Van Dewoestine" email="ervandew@yahoo.com"/>
    </authors>
  </header>
  <body>
    <section id="overview">
      <title>Overview</title>
      <p>
        The primary goal of eclim is to bring
        <a href="http://eclipse.org">eclipse</a> functionality to the vim
        editor.
      </p>
      <p>
        Eclim is less of an application and more of an integration of two great
        projects.  The first, <a href="http://vim.org">vim</a>, is
        <a href="http://en.wikipedia.org/wiki/Editor_wars">arguably</a> one of
        the best text editors in existence.  The second,
        <a href="http://eclipse.org">eclipse</a>, provides many great tools for
        development, especially java development.
      </p>
      <p>
        Each provides many features that can increase developer productivity,
        but both are lacking overall.  Vim lacks native Java support, and
        eclipse still requires the use of the mouse for many things, and when
        compared to vim, provides a less than ideal interface for editing text.
      </p>
      <p>
        That is where eclim comes into play.  Instead of trying to write a java
        ide in vim or a vim editor in eclipse, eclim provides an eclipse plug-in
        that exposes eclipse features through a server interface, and a set of
        vim plug-ins that communicate with eclipse over that interface.
      </p>
      <p>
        Eclim is released under the
        <a href="http://apache.org/licenses/LICENSE-2.0.html">apache 2.0</a>
        license.
      </p>
    </section>
    <section id="news">
      <title>News</title>
      <section id="news_2005_09_11">
        <title>2005-09-11</title>
        <p>
          Several new additions over the past couple weeks:
        </p>
        <ul>
          <li>
            Java code completion: Integrated into vim via vim 7's new "User
            Defined Completion".
          </li>
          <li>
            Added eclim command line support for creating and updating projects,
            including vim support for editing eclipse .classpath files and
            updating eclipse upon writing of those files.
          </li>
          <li>
            Integrated
            <a href="http://www.martiansoftware.com/nailgun/">nailgun</a>
            to greatly improve the command line client performance.
          </li>
          <li>
            Started documenting eclim and its features.
          </li>
        </ul>
        <p>
          With the addition of these features I'm going to stop adding new
          functionality for the time being and focus on testing and ensuring that
          everything works as expected on Windows.
        </p>
      </section>
      <section id="news_2005_08_21">
        <title>2005-08-21</title>
        <p>
          Code navigation / searching is done!  Most of the vim integration for
          searching is done as well.  The only thing missing is viewing code for
          results that are found in a jar file that have no corresponding source
          attachment.  I may end up doing what eclipse appears to do, which is
          to use javap to display the class and method signatures.  That or I'll
          use jad to decompile the whole source.  My only issue with jad, is
          that it is not up to date with the 1.5 byte code.
        </p>
        <p>
          I also have automated importing done as well.  The eclim server
          request just returns a list of possible results to import for a given
          request and the editor (vim in this case) handles prompting the user
          and updating the code.
        </p>
        <note>
          The vim integration now requires vim 7.  Even though vim 7 is still
          alpha, I haven't had any major issues with it and the new additions to
          the vim scripting language are just too good to pass up.
        </note>
        <p>
          My next step is to start documenting everything and testing on a
          Windows environment to ensure there aren't any compatibility issues.
        </p>
        <p>
          After that I should be ready to put out a preliminary release.
          I'm trying to be very careful about releasing anything too soon.  The
          last thing I want it to scare anyone off with a broken project that
          doesn't seem to work properly.
        </p>
      </section>
      <section id="news_2005_08_11">
        <title>2005-08-11</title>
        <p>
          Sourceforge site is up!  Now it's just a matter of getting the ball
          rolling again.
        </p>
        <p>
          I'm hoping to have source code navigation working by the end of next
          week.  This includes the ability to simply hit &lt;enter&gt; on a
          class name, method name, method call, etc. to jump to its declaration.
          Basically I want to replace my previous
          <a href="http://www.vim.org/scripts/script.php?script_id=1106">vim plug-in</a>
          with the new eclipse one.
        </p>
        <p>
          Before I put out any releases though, I want to have a comprehensive
          set of documentation.  For the first few releases, setup will probably
          be pretty manual, with most of it occurring through the Eclipse
          interface.  Going forward, I want to move more of that functionality
          into vim.
        </p>
      </section>
    </section>
  </body>
</document>
