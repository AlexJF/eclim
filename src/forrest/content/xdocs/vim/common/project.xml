<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 2005 - 2008

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN"
  "http://forrest.apache.org/dtd/document-v20.dtd">
<!--
 Author: Eric Van Dewoestine
-->

<document>
  <header>
    <title>Eclipse Projects</title>
    <authors>
      <person name="Eric Van Dewoestine" email="ervandew@gmail.com"/>
    </authors>
  </header>
  <body>
    <p>
      The core concept in most IDEs is the that of a project, and Eclipse is no
      different.  Since a project must exist before you can perform any of the
      more interesting tasks, eclim provides a set of commands to create and
      manage projects from within Vim.
    </p>
    <note>
      For the commands below that accept a project name as an argument, you may
      use Vim's command line completion to complete the project name.
      <br/>
      <code>:ProjectSettings a_p&lt;Tab&gt;</code>
      <br/>
      <code>:ProjectSettings a_project</code>
    </note>
    <ul>
      <li>
        <anchor id="ProjectCreate"/>
        <strong>:ProjectCreate</strong>
        &lt;folder&gt; [-p &lt;project_name&gt;]
        -n &lt;nature&gt; ...
        [-d &lt;project_dependency&gt; ...]
        <ul>
          <li>
            <strong>-p</strong>: Optional argument used to specify the project
            name.  If ommitted, eclim will use the last segment of the project's
            path, with any spaces replaced with underscores, as the project name.
          </li>
          <li>
            <strong>-n</strong>: Required argument which specifies a space
            separated list of project natures (java, php, etc.) to add to the
            project.  If you want to create a project with no natures, you can
            use the word "none" here.
            <source>
              :ProjectCreate ~/workspace/test -n none
            </source>
            Note that eclim support command completion of available nature
            names.
            <source>
              :ProjectCreate ~/workspace/test -n p&lt;tab&gt;
              :ProjectCreate ~/workspace/test -n php
            </source>
          </li>
          <li>
            <strong>-d</strong>: Optional argument used to specify a space
            separated list of project names which the project you're creating
            depends on.
          </li>
        </ul>
        <br/>
        <br/>
        <strong>Some Examples</strong>
        <source>
          :ProjectCreate ~/projects/a_project -n java
          :ProjectCreate ~/projects/a_project -n java -d another_project yet_another_project
          :ProjectCreate ~/projects/a_project -n java php -p My\ Project\ Name
        </source>
      </li>
      <li>
        <anchor id="ProjectList"/>
        <strong>:ProjectList</strong><br/>
        Simply echos a list of available projects.
      </li>
      <li>
        <anchor id="ProjectSettings"/>
        <strong>:ProjectSettings</strong> [&lt;project&gt;]<br/>
        Opens a window with the project's available settings.<br/>
        If a project name is supplied with this command, then the settings for
        that project are opened.<br/>
        If no project name is supplied, and the current file is in a project
        directory, then the settings for the current project will be opened.
        <br/>
        In the resulting window you can modify the values and save the changes
        by simply writing the file in the usual Vim manner (:w).<br/>
        The format of the buffer is in the standard properties file format as
        supported by java, so all the same rules apply when editing.<br/>
        You can refer to the <a href="../settings.html">settings</a>
        documentation for a description of the available settings.
      </li>
      <li>
        <anchor id="ProjectDelete"/>
        <strong>:ProjectDelete</strong> &lt;project&gt;<br/>
        Deletes the project with the specified name.
      </li>
      <li>
        <anchor id="ProjectRefresh"/>
        <strong>:ProjectRefresh</strong> [&lt;project&gt; &lt;project&gt; ...]
        <br/>
        Refreshes the supplied list of named projects by synchronizing
        each project against the current files on disk.  If no projects names
        are supplied, refresh the current project. Useful when files may
        have been added, removed, or updated by a secondary application, like a
        version control system (cvs, subversion, etc).
      </li>
      <li>
        <anchor id="ProjectRefreshAll"/>
        <strong>:ProjectRefreshAll</strong>
        <br/>
        Refreshes all projects.
      </li>
      <li>
        <anchor id="ProjectInfo"/>
        <strong>:ProjectInfo</strong> [&lt;project&gt;]<br/>
        Echos info about the current or supplied project.
      </li>
      <li>
        <anchor id="ProjectOpen"/>
        <strong>:ProjectOpen</strong> &lt;project&gt;<br/>
        Opens a closed project.
      </li>
      <li>
        <anchor id="ProjectClose"/>
        <strong>:ProjectClose</strong> &lt;project&gt;<br/>
        Closes a project.  According to the Eclipse documentation, closing
        unused projects can reduce the amount of memory used, and may improve
        performance when building projects.
      </li>
      <li>
        <anchor id="ProjectNatures"/>
        <strong>:ProjectNatures</strong> [&lt;project&gt;]
        <br/>
        Echos list of natures for the supplied project name or for all projects
        if no project name specified.
      </li>
      <li>
        <anchor id="ProjectNatureAdd"/>
        <strong>:ProjectNatureAdd</strong> &lt;project&gt; [&lt;nature&gt; ...]
        <br/>
        Adds one or more natures to a project.<br/>
        Supports command line completion of nature names.
      </li>
      <li>
        <anchor id="ProjectNatureRemove"/>
        <strong>:ProjectNatureRemove</strong> &lt;project&gt; [&lt;nature&gt; ...]
        <br/>
        Removes one or more natures from a project.<br/>
        Supports command line completion of nature names.
      </li>
      <li>
        <anchor id="ProjectCD"/>
        <strong>:ProjectCD</strong><br/>
        Changes the global current working directory to the root directory of
        the current file's project (executes a :cd).
      </li>
      <li>
        <anchor id="ProjectLCD"/>
        <strong>:ProjectLCD</strong><br/>
        Changes the current working directory of the current window to the
        root directory of the current file's project (executes a :lcd).
      </li>
      <li>
        <anchor id="ProjectTree"/>
        <strong>:ProjectTree</strong> [&lt;project&gt; &lt;project&gt; ...]<br/>
        Opens a window containing a navigable tree for the root directory of
        one or more projects.  If no arguments are supplied, the resulting tree
        is for the current project.  Otherwise, the tree contains multiple root
        nodes, one for each project root directory.<br/>
        <strong>Available key mappings in project tree window.</strong>
        <ul>
          <li>
            <strong>&lt;cr&gt;</strong> -
            Toggles expansion / collapsing of a directory, or executes the first
            available action for a file.
          </li>
          <li>
            <strong>o</strong> -
            Toggles folding / unfolding of a directory, or opens a window of
            available actions to be executed on the selected file.  Hitting
            &lt;enter&gt; on an entry in the action window will execute that
            action on the current file.
          </li>
          <li>
            <strong>s</strong> -
            Executes <strong>:shell</strong> for the directory under the cursor
            or the parent directory of the file under the cursor.
          </li>
          <li>
            <strong>S</strong> -
            Like <strong>s</strong> but opens an external shell.
            Requires that you set the variable g:TreeExternalShell which will be
            the command executed to open the external shell.<br/>
            Example that opens an aterm window:
            <source>
              let g:TreeExternalShell = '!aterm -geometry 125x30 &amp;'
            </source>
          </li>
          <li>
            <strong>R</strong> -
            Refreshes the current directory against the current state of the
            file system.
          </li>
          <li>
            <strong>A</strong> -
            Toggles whether or not hidden files are displayed in the tree.
          </li>
          <li>
            <strong>H</strong> -
            Changes the root node to the current user's home directory.
          </li>
          <li>
            <strong>C</strong> -
            Changes the root node to the directory under cursor.
          </li>
          <li>
            <strong>B</strong> -
            Changes the root node to the parent directory of the current root
            node.
          </li>
          <li>
            <strong>p</strong> -
            Moves the cursor to the parent of the node under the cursor.
          </li>
          <li>
            <strong>P</strong> -
            Moves the cursor to the last child of the nearest open directory.
          </li>
          <li>
            <strong>:CD</strong> &lt;dir&gt; -
            Changes the root to the supplied directory.
          </li>
        </ul>
      </li>
      <li>
        <anchor id="ProjectsTree"/>
        <strong>:ProjectsTree</strong><br/>
        Similar to <strong>:ProjectTree</strong> but opens a tree containing all
        projects.
      </li>
      <li>
        <anchor id="ProjectGrep"/>
        <strong>:ProjectGrep</strong>
        /&lt;pattern&gt;/ file_pattern [file_pattern ...]<br/>
        Executes vimgrep using the supplied arguments from the root of the
        current project allowing you to run a project wide grep from any file
        within the project.
      </li>
      <li>
        <anchor id="ProjectGrepAdd"/>
        <strong>:ProjectGrepAdd</strong>
        /&lt;pattern&gt;/ file_pattern [file_pattern ...]<br/>
        Just like <strong>:ProjectGrep</strong> but using vimgrepadd instead.
      </li>
      <li>
        <anchor id="ProjectLGrep"/>
        <strong>:ProjectLGrep</strong>
        /&lt;pattern&gt;/ file_pattern [file_pattern ...]<br/>
        Just like <strong>:ProjectGrep</strong> but using lvimgrep instead.
      </li>
      <li>
        <anchor id="ProjectLGrepAdd"/>
        <strong>:ProjectLGrepAdd</strong>
        /&lt;pattern&gt;/ file_pattern [file_pattern ...]<br/>
        Just like <strong>:ProjectGrep</strong> but using lvimgrepadd instead.
      </li>
    </ul>
    <p>
      <strong>Configuration</strong>
    </p>
    <p>
      Vim Variables
    </p>
    <ul>
      <li>
        <anchor id="EclimProjectTreeAutoOpen"/>
        <strong>g:EclimProjectTreeAutoOpen</strong> (Default: 0)<br/>
        When non 0, a project tree window will be auto opened for new Vim
        sessions or new tabs in existing sessions if the current file is in a
        project.
      </li>
      <li>
        <anchor id="EclimProjectTreeAutoOpenProjects"/>
        <strong>g:EclimProjectTreeAutoOpenProjects</strong> (Default: ['CURRENT'])<br/>
        List of project names that will be in the project tree when it is auto
        opened.  The special name 'CURRENT' represents the current project of
        the file being loaded in Vim when the tree is auto opened.
      </li>
      <li>
        <anchor id="EclimProjectTreeTaglistRelation"/>
        <strong>g:EclimProjectTreeTaglistRelation</strong> (Default: 'below')<br/>
        Used to define the relation to the <a href="ext:taglist">taglist</a>
        window if the <a href="ext:taglist">taglist</a> plugin is present.
        Valid values include 'below' and 'above'.
      </li>
      <li>
        <anchor id="EclimProjectTreeWincmd"/>
        <strong>g:EclimProjectTreeWincmd</strong><br/>
        (Default: Varies depending on presence of
        <a href="ext:taglist">taglist</a> plugin and its settings.)
        Vim command prepended to the split command used to open the project tree
        window (Ex. 'botright', 'botright vertical', etc.).
      </li>
      <li>
        <anchor id="EclimProjectTreeContentWincmd"/>
        <strong>g:EclimProjectTreeContentWincmd</strong><br/>
        (Default: Varies depending on presence of
        <a href="ext:taglist">taglist</a> plugin and its settings.)
        Vim command used to move focus to the nearest content window where
        actions to open selected files will be executed from.  For instance,
        when issuing a split on a file from the project tree, you most likely
        do not want to split that file relative to the project tree, but rather
        split it relative to the file open in the window to the left or right of
        the project tree (Ex. 'winc h', 'winc l', etc).
      </li>
      <li>
        <anchor id="EclimProjectTreeWidth"/>
        <strong>g:EclimProjectTreeWidth</strong><br/>
        (Default: Defaults to same width as <a href="ext:taglist">taglist</a>
        if present, otherwise defaults to 30.)
        Only used if the project tree is to be opened in a vertical window.
      </li>
      <li>
        <anchor id="EclimProjectTreeHeight"/>
        <strong>g:EclimProjectTreeHeight</strong><br/>
        (Default: Defaults to same height as <a href="ext:taglist">taglist</a>
        if present, otherwise defaults to 10.)
        Only used if the project tree is to be opened in a horizontal window.
      </li>
      <li>
        <anchor id="EclimProjectTreeActions"/>
        <strong>g:EclimProjectTreeActions</strong><br/>
        Default:
        <source>
          let g:EclimProjectTreeActions = [
              \ {'pattern': '.*', 'name': 'Split', 'action': 'split'},
              \ {'pattern': '.*', 'name': 'Tab', 'action': 'tabnew'},
              \ {'pattern': '.*', 'name': 'Edit', 'action': 'edit'},
            \ ]
        </source>
        Map of file patterns to the available actions for opening files that
        match that pattern.
      </li>
    </ul>
  </body>
</document>
