<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 2005 - 2006

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN"
  "http://forrest.apache.org/dtd/document-v20.dtd">
<!--
 Author: Eric Van Dewoestine
-->

<document>
  <header>
    <title>Ant Execution</title>
    <authors>
      <person name="Eric Van Dewoestine" email="ervandew@yahoo.com"/>
    </authors>
  </header>
  <body>
    <p>
      For those that use vim as an editor and ant as a build tool, is is common
      to set your vim 'makeprg' option to execute ant so that you may navigate
      compilation errors via vim's quickfix functionality.
    </p>
    <p>
      Eclim utilizes this same paradigm to provide users with ant execution
      functionality from any file without any of the setup required by vim.
    </p>
    <anchor id="Ant"/>
    <p>
      Eclim provides the following command:
    </p>
    <source>
      <strong>:Ant</strong> [&lt;target&gt; ...]
    </source>
    <p>
      which performs the following steps:
    </p>
    <ul>
      <li>
        Saves any previous 'makeprg' and 'errorformat' option settings so that
        you can define your own settings for the :make command.
      </li>
      <li>
        Sets 'makeprg' to execute ant with the -find option so that it will
        search for your build.xml file in the current directory or in a parent
        directory.
      </li>
      <li>
        Sets 'errorformat' to recognize the following errors:
        <ul>
          <li>javac errors.</li>
          <li>javadoc errors.</li>
          <li>jasper jsp compilattion errors.</li>
          <li>junit errors / failures.</li>
          <li>cactus errors / failures.</li>
        </ul>
      </li>
      <li>
        Executes :make.
      </li>
      <li>
        Restores your previous 'makeprg' and 'errorformat' option settings.
      </li>
    </ul>

    <note>
      <strong>:Ant</strong> also supports use of '!' (:Ant!) just like :make
      does, which tells vim not to jump to the first error if one exists.
    </note>

    <note>
      We recommended enabling
      <a href="../../index.html#EclimMakeLCD">g:EclimMakeLCD</a> (which is
      enabled by default) so that when running <strong>:Ant</strong> you do not
      need to worry about what your current working directory is. The proper
      build.xml file will be used for the currently open file.
    </note>

    <p>
      The <strong>:Ant</strong> command also has the added benefit of command
      completion.<br/>
      <code>:Ant com&lt;Tab&gt;</code>
      <br/>
      <code>:Ant compile</code>
    </p>

    <warning>
      If your ant file has a lot of imports, then the command completion may be
      slow as eclipse parses all the imports when creating the ant model.  You
      will notice the same slow behavior when using eclipse directly to perform
      ant code completion.
    </warning>

    <p>
      <strong>Configuration</strong>
    </p>
    <p>
      Vim Variables
    </p>
    <ul>
      <li>
        <anchor id="EclimAntCompilerAdditionalErrorFormat"/>
        <strong>g:EclimAntCompilerAdditionalErrorFormat</strong> (Default: '')<br/>
        Since there are many more ant tasks beyond javac, javadoc, etc., eclim
        provides this variable as a means to add error format information for
        any additional ant tasks that you may be using.<br/>
        Example: Adding support for xslt<br/>
        <source>
          let g:EclimAntCompilerAdditionalErrorFormat =
            \ '\%A%.%#[xslt]\ Loading\ stylesheet\ %f,' .
            \ '\%Z%.%#[xslt]\ %.%#:%l:%c:\ %m,'
        </source>
        <note>
          The xslt task is a bit flaky when it comes to reporting the file name
          on errors, so the above format will catch successful runs as well.  If
          anyone has a better solution, please submit it.
        </note>
      </li>
    </ul>

  </body>
</document>
