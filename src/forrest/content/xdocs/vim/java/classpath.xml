<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 2005 - 2006

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN"
  "http://forrest.apache.org/dtd/document-v20.dtd">
<!--
 Author: Eric Van Dewoestine
-->

<document>
  <header>
    <title>Eclipse Classpath Editing</title>
    <authors>
      <person name="Eric Van Dewoestine" email="ervandew@yahoo.com"/>
    </authors>
  </header>
  <body>
    <p>
      Source code completion, searching, auto imports, all rely on a properly
      configured classpath.  When you first create a project, a
      <code>.classpath</code> file is created in the project's root directory.
      If you created the project on an existing code-base, eclim will attempt to
      setup the <code>.classpath</code> file with any source code directories or
      libraries in the project.
    </p>
    <p>
      Regardless of the state of your project you will at some point need to
      update the classpath.  The primary method of doing so, is to directly
      edit the <code>.classpath</code> to add, update, or remove entries as
      needed. To help you do this, eclim provides several commands to ease the
      creation of new classpath entries and variables.
    </p>
    <note>
      When you write the <code>.classpath</code> file, Vim will issue a command
      to the eclim server to update the project's classpath, and will report any
      errors via vim's location list (:help location-list).
      <br/><br/>
      In addition to directly editing the <code>.classpath</code> file, you may
      also use maven's support
      (<a href="../../guides/java/maven/maven_classpath.html">1.x</a> or
      <a href="../../guides/java/maven/mvn_classpath.html">2.x</a>) for
      maintaining the eclipse classpath.  For users who use
      <a href="ext:ivy">ivy</a>, eclim also provides a means to
      <a href="../../guides/java/ivy/ivy_classpath.html">
        auto update the eclipse classpath
      </a>
      when saving changes to your ivy.xml.
    </note>
    <ul>
      <li>
        <anchor id="NewSrcEntry"/>
        <strong>:NewSrcEntry</strong> &lt;dir&gt; [&lt;dir&gt; ...]<br/>
        Adds a new entry for one or more source code directories relative to
        the project's root directory.<br/>
        <source>
          <![CDATA[
          <classpathentry kind="src" path="src/java"/>
          ]]>
        </source>
        This command supports command completion of directories relative to
        the .classpath file.
      </li>
      <li>
        <anchor id="NewProjectEntry"/>
        <strong>:NewProjectEntry</strong> &lt;project&gt; [&lt;project&gt; ...]<br/>
        Adds a new entry for one or more dependencies on other projects.
        <source>
          <![CDATA[
          <classpathentry exported="true" kind="src" path="/a_project"/>
          ]]>
        </source>
        This command supports command completion of project names.
      </li>
      <li>
        <anchor id="NewJarEntry"/>
        <strong>:NewJarEntry</strong> &lt;file&gt; [&lt;file&gt; ...]<br/>
        Adds a new entry for one or more jar file dependencies.  If the jar
        file is not in a folder under the project root, you must use an
        absolute path (apparent limitation with Eclipse).  When adding the
        template, this command also adds the necessary (although commented
        out) elements and attributes to set the location of the jar's source
        code and javadocs.
        <source>
          <![CDATA[
          <classpathentry exported="true" kind="lib" path="lib/hibernate-3.0.jar">
            <!--
              sourcepath="<path>">
            -->
            <!--
            <attributes>
              <attribute value="file:<javadoc>" name="javadoc_location"/>
            </attributes>
            -->
          </classpath>
          ]]>
        </source>
      </li>
      <li>
        <anchor id="NewVarEntry"/>
        <strong>:NewVarEntry</strong> &lt;VAR/file&gt; [&lt;VAR/file&gt; ...]<br/>
        Just like NewJarEntry except an Eclipse "var" entry is created.
        When a jar entry references an absolute path, you should instead use
        a var entry.  The var entry allows you to define a base dir as a
        variable (ex. USER_HOME = /home/username), and then reference files
        relative to that variable.
        <source>
          <![CDATA[
          <classpathentry exported="true" kind="var" path="USER_HOME/lib/hibernate-3.0.jar">
            <!--
              sourcepath="<path>">
            -->
            <!--
            <attributes>
              <attribute value="http://<javadoc>" name="javadoc_location"/>
            </attributes>
            -->
          </classpath>
          ]]>
        </source>
        This allows you to share .classpath files with other developers
        without each having a local copy with environment specific paths.
        <br/>
        <br/>
        To add new base classpath variables, you can edit
        <source>
          $ECLIPSE_HOME/plugins/org.eclim_<em>version</em>/classpath_variables.properties
        </source>
        By default, a USER_HOME variable is created that defaults to the java
        System property "user.home" and you can add more as needed.<br/>
        This command supports command completion of Eclipse variable names as
        well as the files and directories beneath the path the variable
        represents.
        <p>
          To manage the classpath variables, eclim also provides the following
          commands.
        </p>
        <ul>
          <li>
            <anchor id="VariableList"/>
            <strong>:VariableList</strong><br/>
            Lists all the currently available classpath variables and their
            corresponding values.
          </li>
          <li>
            <anchor id="VariableCreate"/>
            <strong>:VariableCreate</strong> &lt;name&gt; &lt;path&gt;<br/>
            Creates or updates the variable with the supplied name.
          </li>
          <li>
            <anchor id="VariableDelete"/>
            <strong>:VariableDelete</strong> &lt;name&gt;<br/>
            Deletes the variable with the supplied name.
          </li>
        </ul>
      </li>
    </ul>
  </body>
</document>
