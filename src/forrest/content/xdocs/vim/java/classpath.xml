<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2002-2004 The Apache Software Foundation or its licensors,
  as applicable.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN"
  "http://forrest.apache.org/dtd/document-v20.dtd">
<!--
 Author: Eric Van Dewoestine
-->

<document>
  <header>
    <title>Eclipse Classpath Editing</title>
    <authors>
      <person name="Eric Van Dewoestine" email="ervandew@yahoo.com"/>
    </authors>
  </header>
  <body>
    <p>
      Source code completion, searching, auto imports, all rely on a properly
      configured classpath.  When you first create a project, a
      <code>.classpath</code> file is created in the project's root directory.
      If you created the project on an existing code-base, eclim will attempt to
      setup the <code>.classpath</code> file with any source code directories or
      libraries in the project.
    </p>
    <p>
      Regardless of the state of your project you will at some point need to
      update the classpath.  Eclim provides a couple different ways to keep your
      eclipse <code>.classpath</code> up to date.
    </p>
    <section id="eclipse.classpath">
      <title>.classpath</title>
      <p>
        The first method is to simply edit the .classpath file with vim and make
        the necessary changes.  When you write the file, vim will issue a
        command to the eclim server to update the project's classpath.
      </p>
      <p>
        While editing the <code>.classpath</code> file, eclim also provides a
        few commands to ease the creation of new classpath entries.
      </p>
      <ul>
        <li>
          <strong>:NewSrcEntry</strong> &lt;dir&gt; [&lt;dir&gt; ...]<br/>
          Adds a new entry for one or more source code directories relative to
          the project's root directory.<br/>
          <source>
            <![CDATA[
            <classpathentry kind="src" path="src/java"/>
            ]]>
          </source>
        </li>
        <li>
          <strong>:NewProjectEntry</strong> &lt;project&gt; [&lt;project&gt; ...]<br/>
          Adds a new entry for one or more dependencies on other projects.
          Project name command completion supported (:NewProjectEntry
          a_pro&lt;Tab&gt;).
          <source>
            <![CDATA[
            <classpathentry exported="true" kind="src" path="/a_project"/>
            ]]>
          </source>
        </li>
        <li>
          <strong>:NewJarEntry</strong> &lt;file&gt; [&lt;file&gt; ...]<br/>
          Adds a new entry for one or more jar file dependencies.  If the jar
          file is not in a folder under the project root, you must use an
          absolute path (apparent limitation with eclipse).  When adding the
          template, this command also adds the necessary (although commented
          out) elements and attributes to set the location of the jar's source
          code and javadocs.
          <source>
            <![CDATA[
            <classpathentry exported="true" kind="lib" path="lib/hibernate-3.0.jar">
              <!--
                sourcepath="<path>">
              -->
              <!--
              <attributes>
                <attribute value="file:<javadoc>" name="javadoc_location"/>
              </attributes>
              -->
            </classpath>
            ]]>
          </source>
        </li>
        <li>
          <strong>:NewVarEntry</strong> &lt;VAR/file&gt; [&lt;VAR/file&gt; ...]<br/>
          Just like NewJarEntry except an eclipse "var" entry is created.
          When a jar entry references an absolute path, you should instead use
          a var entry.  The var entry allows you to define a base dir as a
          variable (ex. USER_HOME = /home/username), and then reference files
          relative to that variable.
          <source>
            <![CDATA[
            <classpathentry exported="true" kind="var" path="USER_HOME/lib/hibernate-3.0.jar">
              <!--
                sourcepath="<path>">
              -->
              <!--
              <attributes>
                <attribute value="http://<javadoc>" name="javadoc_location"/>
              </attributes>
              -->
            </classpath>
            ]]>
          </source>
          This allows you to share .classpath files with other developers
          without each having a local copy with environment specific paths.
          <br/>
          <br/>
          To add new base classpath variables, you can edit
          <source>
            $ECLIPSE_HOME/plugins/org.eclim_<em>version</em>/classpath_variables.properties
          </source>
          By default, a USER_HOME variable is created that defaults to the java
          System property "user.home" and you can add more as needed.
        </li>
      </ul>
    </section>
    <section id="buildfile">
      <title>Build Dependency Files</title>
      <p>
        The second method of keeping your eclipse <code>.classpath</code> file
        up to date, is to utilize eclim's plugins for a couple commonly used
        build tools.  By default, eclim only provides support for two such
        tools, but feel free to contribute additional implementations or submit
        a request for another one.
      </p>
      <section id="ivy.xml">
        <title>ivy.xml</title>
        <p>
          The first such tool that eclim supports is
          <a href="http://jayasoft.org/ivy">ivy</a>.
          Ivy is an extension to ant that provides a very maven like dependency
          manager, which even supports the maven repositories.
        </p>
        <p>
          Like maven, ivy manages a project's dependencies in a single file,
          ivy.xml.  Just like the direct .classpath editing that eclim supports,
          when editing an ivy.xml file from vim, eclim adds an auto command to
          update eclipse's classpath when you save the ivy.xml.  Any entries
          found in the ivy.xml that are not in the <code>.classpath</code> will
          be added, and any entries that differ in version will be updated.
        </p>
      </section>
      <section id="project.xml">
        <title>maven's project.xml</title>
        <p>
          The second tool that eclim supports is
          <a href="http://maven.apache.org">maven</a>.  Maven is somewhat of an
          ant alternative that provides a robust yet simple way to manage
          projects.
        </p>
        <p>
          Just like the ivy.xml and .classpath file plugins, eclim also
          provides a plugin to notify the server of any changes when editing the
          maven project.xml file.  Eclim will add any entries from the
          project.xml not found in the .classpath file or update any that differ
          in version.
        </p>
      </section>
    </section>
  </body>
</document>
