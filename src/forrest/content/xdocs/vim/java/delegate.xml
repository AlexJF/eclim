<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 2005 - 2008

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN"
  "http://forrest.apache.org/dtd/document-v20.dtd">
<!--
 Author: Eric Van Dewoestine
-->

<document>
  <header>
    <title>Delegate Methods</title>
    <authors>
      <person name="Eric Van Dewoestine" email="ervandew@gmail.com"/>
    </authors>
  </header>
  <body>
    <anchor id="JavaDelegate"/>
    <p>
      Eclim supports generation of delegate methods via the
      <strong>:JavaDelegate</strong> command.  To utilize this functionality
      you must first place the cursor on a global field (in the main source file
      class or within an inner class), and then invoke the
      <strong>:JavaDelegate</strong> command.
    </p>
    <p>
      In the following source, you can place the cursor anywhere starting from
      the first 'p' in private, to the trailing semicolon, and then invoke the
      <strong>:JavaDelegate</strong> command.
    </p>
    <source>
      private List myList;
    </source>
    <p>
      Invoking this command with the cursor on some other source element will
      generate the appropriate error.
    </p>
    <p>
      Once successfully invoked, the result will be the opening of a lower
      window with all the methods that may be inserted that will delegate to the
      value of the field.
    </p>
    <p>
      Here is a section of the content displayed when invoking the command on a
      field of type java.util.List like the one above.
    </p>
    <source>
      com.test.TestList

      package java.util;
      public interface List
        public abstract int size ()
        public abstract boolean isEmpty ()
        public abstract boolean contains (Object o)
        public abstract Object[] toArray ()
        ...
    </source>
    <p>
      From this newly opened window you can select a method by simply hitting
      &lt;Enter&gt; with the cursor over the method signature and a delegate
      method will be created.
    </p>
    <p>
      For example, if you hit &lt;Enter&gt; on the <code>size()</code> method,
      then the following code will be inserted.
    </p>
    <source>
      /**
       */
      public int size ()
      {
        return myList.size();
      }
    </source>
    <p>
      If you would like to generate delegate methods for all methods in an
      interface or class, then simply hit &lt;Enter&gt; with the cursor over the
      class name, and delegate methods will be created for each method in that
      interface or class.
    </p>
    <note>
      The insertion of method stubs is done externally with Eclipse and with
      that comes a couple <a href="../external_editing.html">caveats</a>.
    </note>
    <p>
      This functionality is currently supported for both outer and inner
      classes, but not for anonymous inner classes.
    </p>
  </body>
</document>
