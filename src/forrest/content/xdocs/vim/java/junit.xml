<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 2005 - 2006

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN"
  "http://forrest.apache.org/dtd/document-v20.dtd">
<!--
 Author: Eric Van Dewoestine
-->

<document>
  <header>
    <title>JUnit</title>
    <authors>
      <person name="Eric Van Dewoestine" email="ervandew@yahoo.com"/>
    </authors>
  </header>
  <body>
    <anchor id="JUnitExecute"/>
    <anchor id="JUnitResult"/>
    <section id="execution">
      <title>Executing test cases and viewing the results.</title>
      <p>
        When editing java source files eclim exposes a couple commands which
        allow you to easily execute junit test cases and view the results.
        First, please note that eclim does not attempt to provide a junit
        execution environment.  Instead the goal is to allow you to easily
        interface with your favorite build tool (ant, maven, etc.).
      </p>
      <p>
        The first of the commands is <strong>:JUnitExecute</strong>.  This
        command is responsible for executing the current test case or the test
        case supplied as an argument.
      </p>
      <p>
        The second command is <strong>:JUnitResult</strong>.  This command is
        responsible for locating and opening the result file for the current
        test case or the test case supplied as an argument.
      </p>
      <note>
        Both commands support command completion of their respective arguments
        as long as the settings defined below are defined properly.
      </note>
      <p>
        <strong>Configuration</strong>
      </p>
      <p>
        Eclim Settings:
      </p>
      <ul>
        <li>
          <anchor id="org.eclim.java.junit.src_dir"/>
          <strong>org.eclim.java.junit.src_dir</strong><br/>
          Defines the location of the junit test case source files.  Currently
          this is only utilized for command completion of test case names for
          <strong>:JUnitExecute</strong>.  Supports "&lt;project&gt;" key to
          represent the root directory of the current project.<br/>
          Ex.
          <source>
            <![CDATA[
            org.eclim.java.junit.src_dir=<project>/src/test/junit
            ]]>
          </source>
        </li>
        <li>
          <anchor id="org.eclim.java.junit.output_dir"/>
          <strong>org.eclim.java.junit.output_dir</strong><br/>
          Defines the location of the junit test case results.  Supports
          "&lt;project&gt;" key to represent the root directory of the current
          project.<br/>
          Ex.
          <source>
            <![CDATA[
            org.eclim.java.junit.output_dir=<project>/build/test/results
            ]]>
          </source>
        </li>
        <li>
          <anchor id="org.eclim.java.junit.command"/>
          <strong>org.eclim.java.junit.command</strong><br/>
          Defines the command used to execute a test case. Supports
          "&lt;testcase&gt;" key to represent the requested test case to
          execute.<br/>
          Ex.
          <source>
            <![CDATA[
            org.eclim.java.junit.command=Ant -Djunit.include=<testcase> test
            ]]>
          </source>
        </li>
      </ul>
    </section>

    <anchor id="JUnitImpl"/>
    <section id="stubs">
      <title>Generating test method stubs.</title>
      <p>
        While editing junit files, eclim provides functionality to generate test
        method stubs similar to the <a href="impl.html">method override / impl</a>
        functionality provided for non-test-case classes.  The only difference
        is that instead of <strong>:JavaImpl</strong>, you use
        <strong>:JUnitImpl</strong> to open the window of possible methods to
        implement.
      </p>
      <p>
        To determine what class the current test case is for, eclim expects that
        the standard naming convention for test cases is followed, where the test
        case has the same fully qualified class name as the target class with a
        'Test' suffix.<br/>
        For a class <code>org.foo.bar.Baz</code><br/>
        The exepected test case would be named <code>org.foo.bar.BazTest</code>.
        <br/>
        So when invoking <strong>:JUnitImpl</strong> from within
        <code>org.foo.bar.BazTest</code>, eclim would look for the class
        <code>org.foo.bar.Baz</code> and generate a list of methods to test from
        it.
      </p>
      <p>
        When you hit &lt;enter&gt; on the method to add, if that method belongs
        to a type in the hierarchy for the class being tested, then the
        corresponding <code>testMethodName</code> will be inserted, otherwise a
        regular overriding stub will be generated.
      </p>
      <note>
        The insertion of methods is done externally with Eclipse and with that
        comes a couple <a href="../external_editing.html">caveats</a>.
      </note>
      <note>
        The junit.jar file must be in your project's classpath for eclim to
        display possible methods to override in the junit test-case hierarchy.
      </note>
    </section>
  </body>
</document>
