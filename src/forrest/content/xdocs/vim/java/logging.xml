<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 2005 - 2008

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN"
  "http://forrest.apache.org/dtd/document-v20.dtd">
<!--
 Author: Eric Van Dewoestine
-->

<document>
  <header>
    <title>Logging</title>
    <authors>
      <person name="Eric Van Dewoestine" email="ervandew@gmail.com"/>
    </authors>
  </header>
  <body>
    <p>
      While editing a java source file, if you start to create a logging
      statement (<code>log.</code> or <code>logger.</code>), the logging plugin
      will attempt to perform the appropriate initialization (imports, static
      variable) for the configured logging implementation.
    </p>
    <p>
      Eclim provides a handful of templates for the most widely used
      implementations (commons-logging, slf4j, log4j, and jdk).  However, if you
      happen to use an alternate logging framework, or perhaps a home grown
      framework, eclim also provides the means to supply a custom template.  To
      utilize it, simply set the <strong>org.eclim.java.logging.impl</strong>
      setting to "custom" and add your template to your vim files directory
      under <code>eclim/resources/jdt/templates/logger.gst</code>.  Two
      variables will be supplied to your template: <code>var</code>, which is
      the logger instance variable, and <code>class</code>, which is the class
      name of the current class you are implementing.<br/>
      Here is an example for the new eclim logger implementation:
    </p>
    <source>
      import org.eclim.logging.Logger;
      private static final Logger ${var} = Logger.getLogger(${class}.class);
    </source>
    <p>
      After performing the necessary variable substitution, eclim will take any
      imports and insert them amongst your existing import statements.  The
      remaining code will be inserted after your class definition.
    </p>
    <p>
      <strong>Configuration</strong>
    </p>
    <p>
      Vim Variables:
    </p>
    <ul>
      <li>
        <anchor id="EclimLoggingDisabled"/>
        <strong>g:EclimLoggingDisabled</strong> (Default: 0)<br/>
        If set to a value greater than 0, then this plugin will be disabled.
      </li>
    </ul>
    <p>
      Eclim Settings:
    </p>
    <ul>
      <li>
        <anchor id="org.eclim.java.logging.impl"/>
        <strong>org.eclim.java.logging.impl</strong>
        (Default: "commons-logging")<br/>
        Determines which logging implementation to use.
        <br/>
        Possible values include "commons-logging", "slf4j", "log4j", "jdk",
        and "custom".
      </li>
      <li>
        <anchor id="org.eclim.java.logging.template"/>
        <strong>org.eclim.java.logging.template</strong> (Default: 'logger.gst')
        <br/>
        Determines the name of the template to use for the custom logger.  The
        name must be a file name relative to eclim/resources/jdt/templates/.
      </li>
    </ul>
  </body>
</document>
