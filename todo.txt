System
  - update backup script to pull down nightly wiki tarballs.

Installer
  - help alleviate need for users to set ECLIPSE_HOME.
    - inject path into one of the vim scripts and allow override with
      ECLIPSE_HOME
    - on Windows, just set the ECLIPSE_HOME for the user if not already set.
  - when deciding where to install vim plugins, run vim to determine its
    runtime path dirs and give the user the option to install into one that
    they have write permissions to.
  - maintain a version database for resources directories so we can determine
    what files were added or modified by the user.
    - keep an md5sum of each file to determine user changes which can be
      resolved at install time via a visual diff.

Documentation
  - docs on new ant syntax file.

Test on Windows
  - new browser discovery.
  - new compilation unit retrieval logic.
    - make sure src file not found results in proper error.

Bugs
  - re-visit Ctrl-C hook to perform a clean exit of eclim/eclipse.
  - xml validate, if a doctype exists, but no dtd, then there is an error for
    every element since they are "not declared" (ex. ant/cvs.xml).
  - on JavaSearch for implementors, exclude the javadoc matches.
  - /etc/{init,conf}.d/eclimd

Enhancements
  - Move shutdown functionality to a different port.  This way if nailgun is
    hung, the user will still be able to issue a graceful shutdown, hopefully.

  - :JavaImpl, :JavaGetSet
    - look into using non-Javadoc comments for the method so that the
      parent's javadoc is auto inserted at generation time.

  - Integrate w/ google calendar
    http://code.google.com/apis/gdata/client-java.html

  - Add support for using a running eclipse gui as the eclimd server.
    - add a menu item which starts up nailgun and spring.
      - ping first to see if one is running.
    - combine w/ vimplugin to allow vim in eclipse w/ eclipse funtionality.

  - :JavaImpl support anonymous classes.
  - add ProjectImport dir
    - Given a directory, search for all .project files and create projects
      for their corresponding parent directory (be sure to read the project
      name from the file as it may not follow the eclim naming standard).
    - If no dir supplied use workspace dir?
  - get working under cygwin
    if has('win32unix')
    - eclim command
    - file paths
    - search results
  - implement means to highlight text and push it to the command prompt
    Ctrl-: or something similar.

  - For commands that spawn temp buffer, assign a b:currentfile var to the
    file that opened the buffer so that other commands can still be invoked
    by changing the get file name function to examine b:currentfile.
    - JavaImpl, JavaDelegate, JUnitImpl, JUnitResult
  - for temp buffers containing java code (JavaImpl, class prototypes, etc.)
    set a variable to mainain the name of the current project, and add a way to
    force element based searches to become keyword based.

  - integrate w/ http://www.easyeclipse.org/site/home/
  - add :JavaBeanImpl for defining an implementation of a bean interface.
  - automate switch statement generation for enums.
    When switch(enum), create cases for all enum values.
  - :JavaImpl, wrap long parameter lines.
  - modify for loop abbreviations to increment the looping var if the current
    one is taken.  (ii, jj, kk, ll, mm, nn, ...)
  - create a groovy templating harness
    - create utility class with methods such as
      - createMethod (velocity_template, values)
      - createField (velocity_template, values)
      - createImport (velocity_template, values)
      - createClass (velocity_template, values)
      - createCode (velocity_template, values) - insert code at current
        cursor position
    - standard templates
      - jakarta equals, hashCode, toString.
      - logging
  - push method to interface... create method in interface from method in
    implementation.
  - With :JavaRun, also have an input buffer that when saved pushes the text
    to stdin of the running app, and then clears the buffer for more input.
  - allow re-formatting of xml section that can take an xml file and break up
    the elements into lines accordingly.
      <blah><duh>somevalue</duh></blah>
    becomes
      <blah>
        <duh>somevalue</duh>
      </blah>
  - java version of http://www.vim.org/scripts/script.php?script_id=165 ?

JTest support:
  - settings
    dict {
      name
      src dir
      output dir
      command
    }

  - {'name': 'junit', 'src_dir': , 'output_dir': , 'command': }
  - {'name': 'cactus', 'src_dir': , 'output_dir': , 'command': }
  - {'name': 'testng', 'src_dir': , 'output_dir': , 'command': }

Other
  - fix java indent
    - doesn't properly handle indentation of enums
        public enum MyEnum
        {
          FIRST,
            SECOND,
            THIRD
        }
