<?xml version="1.0" encoding="UTF-8"?>
<!--
 Author: Eric Van Dewoestine
-->
<status>
  <developers>
    <person name="Eric Van Dewoestine" email="ervandew@yahoo.com" id="ervandew"/>
  </developers>

  <todo>
    <actions priority="high">
      <action context="junit" dev="ervandew">
        Create junit test harness for starting eclimd, running tests, and then
        stopping eclimd.
      </action>
    </actions>

    <actions priority="medium">
      <action context="windows" dev="ervandew">
        Use my BatchFileService.exe to create a Windows service for eclimd.
      </action>
      <action context="src_block" dev="ervandew">
        Manipulation of a source block... wrap in do,if,for,try,while.
      </action>
      <action context="javadoc" dev="ervandew">
        Javadoc functionality.<br/>
        Eclipse has setting for a project's own javadocs... where is this
        stored (not in .project, or any of the .setting/, maybe in the
        workspace)?<br/>
        <code>org.eclipse.jdt.ui.JavaUI.getProjectJavadocLocation(IJavaProject)</code><br/>
        <code>org.eclipse.jdt.ui.JavaUI.setProjectJavadocLocation(IJavaProject, URL)</code>
      </action>
      <action context="searching" dev="ervandew">
        <p>
          Expand searching from non java source files (spring xml, hibernate
          xml, etc).<br/>
          Third party plugins may provide this functionality.
        </p>
      </action>
      <action context="refactoring" dev="ervandew">
        <ul>
          <li>Safe deletes. Check for references before deleting.</li>
          <li>Convert anonymous class into inner/outer class.</li>
          <li>Convert inner class to outer class.</li>
          <li>Extract interface.</li>
          <li>Method / Class / Field renaming.</li>
          <li>
            Push methods / fields up to superclass or down to subclass.
          </li>
          <li>Move types, methods, fields.</li>
        </ul>
      </action>
      <action context="delegate" dev="ervandew">
        Generate delegate methods for a field when wrapping that type.
        <br/>
        <source>
          public void add (Object _object)
          {
            list.add(_object);
          }
        </source>
      </action>
      <action context="junit" dev="ervandew">
        Junit integration.
        <ul>
          <li>Template for test case</li>
          <li>Run and view test results in a browser.</li>
          <li>Functionality from my junit.vim plugin.</li>
        </ul>
      </action>
      <action context="eclipse_features" dev="ervandew">
        Read up on other default eclipse features that may be useful within vim.
        <br/>
        http://help.eclipse.org/help31/index.jsp?topic=/org.eclipse.jdt.doc.user/tips/jdt_tips.html
      </action>
      <action context="xml" dev="ervandew">
        Xml validation via xmllint or call to eclimd.
      </action>
    </actions>

    <actions priority="low">
      <action context="languages" dev="ervandew">
        Support for other languages.
        <ul>
          <li>
            <strong>c/c++</strong><br/> http://www.eclipse.org/cdt/
          </li>
          <li>
            <strong>cobol</strong><br/> http://www.eclipse.org/cobol/
          </li>
          <li>
            <strong>javascript</strong><br/> http://www.ee.ryerson.ca/~hkataria/
          </li>
          <li>
            <strong>perl</strong><br/> http://e-p-i-c.sourceforge.net/
          </li>
          <li>
            <strong>php</strong><br/> http://www.phpeclipse.net
          </li>
          <li>
            <strong>python</strong><br/> http://pydev.sourceforge.net/
          </li>
          <li>
            <strong>ruby</strong><br/>
            http://rubyeclipse.sourceforge.net/
            http://www.radrails.org/
          </li>
        </ul>
        These will be prioritized by demand... My personal preference would be:
        <ol>
          <li>ruby</li>
          <li>python</li>
          <li>php</li>
          <li>javascript</li>
          <li>perl</li>
          <li>
            c/c++, cobol<br/>
            I'd only implement these if there was a high enough demand to
            warrant it, but would welcome contributions.
          </li>
        </ol>
      </action>
      <action context="thrid_party" dev="ervandew">
        Research third party plugins for additional functionality
        <ul>
          <li>Hibernate: JBoss IDE / Hibernate Tools</li>
          <li>Spring: Spring IDE</li>
          <li>Tapestry: Spindle</li>
        </ul>
      </action>
      <action context="debugger" dev="ervandew">
        Debugger functionality.
      </action>
      <action context="bean" dev="ervandew">
        Additional bean functionality (beaninfo, resource bundles).
      </action>
      <action context="cvs" dev="ervandew">
        CVS support.
        <ul>
          <li>cvs annotations: see who made what changes in the src.</li>
        </ul>
        This will be a real challenge to display in vim cleanly (vim signs
        aren't going to cut it).
      </action>
      <action context="run" dev="ervandew">
        Run main class and catch any exceptions into a new window and allow
        jumping to a stack trace element's referenced source location.
      </action>
      <action context="code_completion" dev="ervandew">
        More code completion
        <ul>
          <li>
            ant:<br/>
            plugin: org.eclipse.ant.ui
            interface:
              org.eclipse.jface.text.contentassist.IContentAssistProcessor
            implementation:
              org.eclipse.ant.internal.ui.editor.AntEditorCompletionProcessor
          </li>
          <li>forrest</li>
          <li>log4j</li>
        </ul>
      </action>
      <action context="code analysis" dev="ervandew">
        additional source code analysis
        <ul>
          <li>PMD - http://pmd.sourceforge.net/</li>
          <li>Lint4j - http://www.jutils.com/</li>
          <li>
            Coverclipse - http://coverlipse.sourceforge.net<br/>
            Other code coverage tools -
            (http://java-source.net/open-source/code-coverage)
          </li>
          <li>
            Other code analyizers -
            http://java-source.net/open-source/code-analyzers
          </li>
        </ul>
      </action>
      <action context="ant" dev="ervandew">
        Support :Ant from any file in a project that contains a build.xml file.
        (use ideas from my ant.vim plugin).
      </action>
      <action context="javadoc" dev="ervandew">
        implement a jcommenter.vim replacement.<br/>
        Added functionality:
        <ol>
          <li>no need to select multiline method declarations to comment.</li>
          <li>
            if method overrides / implements parent method, output {@inheritDoc}
            and @see, or if the method already has comments, prompt the user if
            inheritDoc should replace existing docs.
          </li>
          <li>Others I haven't thought of yet.</li>
        </ol>
      </action>
      <action context="todo/fixme" dev="ervandew">
        Command to add all FIXME/TODO into a grep quickfix.
      </action>
      <action context="folding" dev="ervandew">
        Lots of folding support... comments, code blocks, xml, html.<br/>
        Utilize matchit.vim.
      </action>
      <action context="code format" dev="ervandew">
        Find best way to configure eclipse code format tab style from within
        eclim.
      </action>
      <action context="aspectj" dev="ervandew">
        AspectJ support via AJDT (http://www.eclipse.org/ajdt)
      </action>
      <action context="xsd" dev="ervandew">
        XSD support (http://www.eclipse.org/xsd)
      </action>
      <action context="wtp" dev="ervandew">
        Possible integration w/ eclipse web tools platform
        (http://eclipse.org/webtools/index.html)
      </action>
      <action context="database" dev="ervandew">
        Database integration
        <ul>
          <li>Database metadata</li>
          <li>Data (paged table data)</li>
          <li>
            SQL editor w/ completion support for keywords, table names, column
            names, etc.
          </li>
        </ul>
      </action>
    </actions>

    <actions priority="eclipse 3.2">
      <action context="3.2 enhancements" dev="ervandew">
        <ul>
          <li>
            camel case searching ("NPE" finds "NullPointerException").
          </li>
          <li>
            javadoc context sensitive completion.
          </li>
          <li>
            automatic javadoc attachment (refer to org.eclipse.pde.core.javadoc
            extension point documentation)
          </li>
          <li>
            Code "Clean Up"
            <ul>
              <li>
                Remove Unused Code (imports, private methods, private constructors,
                private types).
              </li>
              <li>
                JSE 5.0 (add missing @Override, add missing @Deprecated)
              </li>
              <li>
                more to come with 3.2 release cycle
              </li>
            </ul>
          </li>
        </ul>
      </action>
    </actions>
  </todo>

  <changes>
    <release version="1.1.0" date="unreleased">
      <action dev="ervandew" type="add" context="source validation">
        <a href="vim/java/source.html">Source validation</a>.
      </action>
      <action dev="ervandew" type="add" context="javadoc">
        <a href="vim/java/doc.html">Javadoc</a> viewing.
      </action>
      <action dev="ervandew" type="add" context="impl">
        <a href="vim/java/impl.html">Override/Impl</a> stub generation.
      </action>
      <action dev="ervandew" type="add" context="bean">
        <a href="vim/java/bean.html">Bean getter/setter</a> generation.
      </action>
      <action dev="ervandew" type="add" context="bean">
        <a href="vim/java/junit.html">JUnit</a> test method stub generation.
      </action>
      <action dev="ervandew" type="add" context="search">
        <a href="vim/java/search.html#alternate">Alternate searching</a>
        in code bases outside of an eclipse project.
      </action>
      <action dev="ervandew" type="add" context="quickfix">
        <a href="vim/java/correct.html">Code correction</a> via eclipse
        quickfix functionality.
      </action>
      <action dev="ervandew" type="add" context=".classpath">
        Added validation of the .classpath file when saving.  Errors are then
        reported via vim's quickfix.
      </action>
      <action dev="ervandew" type="add" context="searching">
        Support for viewing source files located in archives (zip, jar) when
        searching.<br/>
        Support for generating a source prototype when viewing search results
        that do not have a corresponding source file attached.
      </action>
      <action dev="ervandew" type="add" context="abbreviations">
        Added some handy <a href="vim/java/abbreviations.html">abbreviations</a>.
      </action>
      <action dev="ervandew" type="update" context="vim scripts">
        A few vim scripts were renamed, so you will need to delete the old file
        when upgrading.
        <warning>
          <ul>
            <li>
              ftplugin/eclipse_classpath/eclipse_classpath.vim moved to<br/>
              ftplugin/eclipse_classpath/eclim.vim
            </li>
            <li>
              ftplugin/ivy/ivy.vim moved to<br/>
              ftplugin/ivy/eclim.vim
            </li>
            <li>
              ftplugin/maven_project/maven_project.vim moved to<br/>
              ftplugin/maven_project/eclim.vim
            </li>
          </ul>
        </warning>
      </action>
    </release>
    <release version="1.0.0" date="Oct 16, 2005">
      <action dev="ervandew" type="add" context="eclim">
        Initial release.
      </action>
    </release>
    <release version="unreleased" date="Aug 09, 2005">
      <action dev="ervandew" type="add" context="docs">
        Created eclim documentation site.
      </action>
    </release>
  </changes>

</status>
